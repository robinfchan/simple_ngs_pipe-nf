/*
 * -------------------------------------------------
 *   Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

manifest {
  name = 'simple_ngs_pipe-nf'
  author = ''
  mainScript = 'main.nf'
  nextflowVersion = '>=20.10.0'
  version = '0.0.1'
}

// Command-line NF parameters
params {
  // Required
  fastq_path              = null
  genome_fa               = null

  experiment_name         = null

  // Usually don't need to change these
  base_results_path       = './results'
  run_id                  = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSS")
  publish_dir_mode        = 'copy'
  help                    = false
  enable_conda            = false

  // Docker images to use
  docker_image_uri              = ""
  docker_image_version          = ""

  // Resource limits for each process
  max_memory              = '768.GB'
  max_cpus                = 96
  max_time                = '240.h'

  // DON'T CHANGE
  results_path                  = "${params.base_results_path}/${params.experiment_name}/${manifest.name}/${params.run_id}"
  tracedir                      = "${params.results_path}/pipeline_info"
}

// enable env -profiles
profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  docker {
    docker.enabled = true
    fixOwnership = true
    runOptions = "-u \$(id -u):\$(id -g)"
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}